<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Boylad</title>
    <link>https://www.guankui.name/tags/coding/</link>
    <description>Recent content in Coding on Boylad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 08 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.guankui.name/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用Python‘画’小猪佩奇</title>
      <link>https://www.guankui.name/posts/2019/first-coding/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.guankui.name/posts/2019/first-coding/</guid>
      <description>四月份的时候，学院举办的数学文化节中一项活动是通过编程的方法画一只小猪佩奇。当时我初学Python没多久，知道有一个turtle库可以控制笔触在画布上移动而形成图案。于是我就想着以此来‘画’一只小猪佩奇，作为初学Python编程的一次尝试。
对于一个复杂且无规律可循的图案，通过代码控制笔触是匪夷所思的。我意识到可以将每个像素点画出来，这样只需要不断画直线就可以了，但这意味着低效率。为了提高效率，我尝试了并行计算——同时画多条直线，然而我没能成功。从理论上讲这是完全可以实现的，可能是我对Python还不够熟悉吧。
以下的Python代码要做的事情非常简单：先获取一张小猪佩奇图片，将其像素点依次储存到一个名为array的列表中，列表中的每个元素为一个三元（R、G、B）元组；然后用Turtle依次遍历此列表中每个元素，Turtle的颜色亦遍历列表中每个元素，并用循环语句控制好换行。
import urllib.request from PIL import Image import turtle import os url = &amp;#34;https://raw.githubusercontent.com/Guankuiliu/&amp;#34;\ &amp;#34;image/master/Figure2018/git/Peppa_Pig.jpg&amp;#34; name = &amp;#34;Peppa_Pig.jpg&amp;#34; conn = urllib.request.urlopen(url) f = open(name,&amp;#39;wb&amp;#39;) f.write(conn.read()) f.close() im = Image.open(&amp;#34;Peppa_Pig.jpg&amp;#34;) im = im.resize((180, 180)) im = im.rotate(90) os.remove(&amp;#34;Peppa_Pig.jpg&amp;#34;) width = im.size[0] height = im.size[1] im = im.convert(&amp;#39;RGB&amp;#39;) array = [] for x in range(width): for y in range(height): r, g, b = im.getpixel((x,y)) rgb = (r/255, g/255, b/255) array.</description>
    </item>
    
  </channel>
</rss>
